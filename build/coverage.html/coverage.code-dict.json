{"/home/travis/build/npmtest/node-npmtest-markdown-styles/test.js":"/* istanbul instrument in package npmtest_markdown_styles */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-markdown-styles/lib.npmtest_markdown_styles.js":"/* istanbul instrument in package npmtest_markdown_styles */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_markdown_styles = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_markdown_styles = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-markdown-styles/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-markdown-styles && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_markdown_styles */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_markdown_styles\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_markdown_styles.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_markdown_styles.rollup.js'] =\n            local.assetsDict['/assets.npmtest_markdown_styles.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_markdown_styles.__dirname + '/lib.npmtest_markdown_styles.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-markdown-styles/node_modules/markdown-styles/lib/index.js":"module.exports = {\n  resolveArgs: require('./resolve-args'),\n  render: require('./render'),\n  pipeline: require('./pipeline'),\n  convertMd: require('./convert-md')\n};\n","/home/travis/build/npmtest/node-npmtest-markdown-styles/node_modules/markdown-styles/lib/resolve-args.js":"var fs = require('fs'),\n    path = require('path'),\n    nodeResolve = require('resolve');\n\nvar layoutDir = __dirname + '/../layouts/';\n\nmodule.exports = function(argv) {\n  // defaults\n  argv.input = path.resolve(process.cwd(), argv.input || './input/');\n  argv.output = path.resolve(process.cwd(), argv.output || './output/');\n  if (!argv.layout) {\n    if (argv['export']) {\n      argv.layout = argv['export'];\n    } else {\n      argv.layout = 'github';\n    }\n  }\n\n  if (argv.template) {\n    throw new Error('--template is deprecated in v2.0, please point --layout to ' +\n      'the layout directory with ./page.html in it.');\n  }\n  if (argv['asset-dir'] || argv.assetDir) {\n    throw new Error('--asset-dir is deprecated in v2.0, please point --layout to ' +\n      'the layout directory with ./page.html and ./assets in it.');\n  }\n  if (argv.command) {\n    throw new Error('--command is deprecated in v2.0');\n  }\n  if (argv.runner) {\n    throw new Error('--runner is deprecated in v2.0');\n  }\n\n  // we only accept a single layout argument, --layout\n  if (argv.layout && argv.layout.charAt(0) === '/' && fs.existsSync(argv.layout)) {\n    // 1) it can be an absolute path to a folder with ./page.html\n    argv.layout = path.normalize(argv.layout);\n  } else if (fs.existsSync(process.cwd() + '/' + argv.layout)) {\n    // 2) it can be a relative path\n    argv.layout = path.normalize(process.cwd() + '/' + argv.layout);\n  } else if (fs.existsSync(layoutDir + argv.layout + '/')) {\n    // 3c) it can be the name of a builtin layout\n    argv.layout = path.normalize(layoutDir + argv.layout + '/');\n  }\n\n  if (argv['export']) {\n    argv['export'] = argv.layout;\n  }\n\n  // in node.js 6.x path.dirname expects a string\n  if(argv.template && typeof argv.template === 'string') {\n    // set up partials and helpers directories\n    var layoutBase = path.dirname(argv.template);\n    ['partials', 'helpers'].forEach(function(name) {\n      if (argv[name]) {\n        argv[name] = path.resolve(process.cwd(), argv[name]);\n      } else if (fs.existsSync(layoutBase + '/' + name)) {\n        // if the folder exists in the layout, use it automatically\n        argv[name] = layoutBase + '/' + name;\n      }\n    });\n  }\n\n  // parse --highlight-<extension>\n  var hl = {};\n\n  Object.keys(argv).forEach(function(name) {\n    var matched = (typeof name === 'string' ? name.match(/highlight\\-(.*)/) : false);\n    if (matched) {\n      var ext = matched[1];\n      argv[name] = findModule(argv[name], [process.cwd, __dirname]);\n      try {\n        hl[ext] = require(argv[name]);\n      } catch(err) {\n        console.error(err);\n        throw err;\n      }\n    }\n  });\n\n  argv['highlight'] = hl;\n  return argv;\n};\n\nfunction findModule(name) {\n  var result = '';\n  try {\n    result = nodeResolve.sync(name, { basedir: process.cwd() });\n  } catch (e) {\n    try {\n      result = nodeResolve.sync(name, { basedir: __dirname });\n    } catch (err) {\n      console.error('Cannot find module ' + name + ' from ' + process.cwd() + ' or ' + __dirname);\n      throw err;\n    }\n  }\n  return result;\n}\n","/home/travis/build/npmtest/node-npmtest-markdown-styles/node_modules/markdown-styles/lib/render.js":"var fs = require('fs'),\n    path = require('path'),\n    pi = require('pipe-iterators'),\n    glob = require('wildglob'),\n    pipeline = require('./pipeline'),\n    stream = require('./stream');\n\nmodule.exports = function(argv, onDone) {\n\n  var finalDone = onDone || function() {};\n  var doneCount = 0;\n  var expectedDoneCount = 2;\n  onDone = function() {\n      if (++doneCount == expectedDoneCount) {\n          finalDone();\n      }\n  };\n\n\n  // --export\n  if (argv['export']) {\n    pi.fromArray(\n      glob.sync(path.normalize(argv['export']).replace(/\\/$/, '') + '/**')\n    ).pipe(pi.filter(function(filename) {\n          var stat = fs.statSync(filename);\n          return stat.isFile();\n        }))\n        .pipe(stream.copy(function(filename) {\n          var target = path.normalize(filename.replace(argv['export'], argv.output + '/'));\n          console.log('Copy layout file', filename, '=>', target);\n          return target;\n        }))\n        .pipe(pi.devnull().once('finish', finalDone));\n    return;\n  }\n\n  var isSingleFile = fs.statSync(argv.input).isFile();\n  argv.isSingleFile = isSingleFile;\n\n  pi.fromArray(\n    glob.sync(isSingleFile ? argv.input : argv.input.replace(new RegExp(path.sep + '$'), '') + '/**')\n    ).pipe(pi.head([\n\n    pi.filter(function(filename) {\n      var stat = fs.statSync(filename);\n      return stat.isFile();\n    }),\n\n    pi.match(\n      // for non-markdown files: copy the file.\n      function(filename) {\n        var ext = path.extname(filename);\n        if (ext === '.markdown' ||\n            ext === '.mdown' ||\n            ext === '.mkd' ||\n            ext === '.mkdn' ||\n            ext === '.md') {\n          return false;\n        }\n        return true;\n      },\n      stream.copy(function(filename) {\n        if (path.basename(filename) === 'meta.json') {\n          return false;\n        }\n        var target = path.normalize(filename.replace(argv.input, argv.output));\n        console.log('Copy non-markdown file', filename, '=>', target);\n        return target;\n      }),\n      // rest:\n      pi.head([\n        stream.read(),\n        pipeline(argv),\n        stream.write().once('finish', onDone)\n      ])\n    )\n  ]));\n\n\n  // copy assets\n  var assetDir = path.normalize(argv.layout + '/assets').replace(/\\/$/, '');\n  if (fs.existsSync(assetDir)) {\n    pi.fromArray(glob.sync(assetDir + '/**'))\n        .pipe(pi.filter(function(filename) {\n          var stat = fs.statSync(filename);\n          return stat.isFile();\n        }))\n        .pipe(stream.copy(function(filename) {\n          var target = path.normalize(filename.replace(assetDir, argv.output + '/assets/'));\n          console.log('Copy asset file', filename, '=>', target);\n          return target;\n        }))\n        .pipe(pi.devnull().once('finish', onDone));\n  } else {\n    console.log('Assets path does not exist: ' + assetDir + ', so no assets were copied.');\n    // always call onDone to increment the number of completed tasks\n    onDone();\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-markdown-styles/node_modules/markdown-styles/lib/pipeline.js":"var fs = require('fs'),\n    pi = require('pipe-iterators'),\n    md = require('markdown-stream-utils'),\n    setOutputPath = require('./set-output-path'),\n    applyTemplate = require('./apply-template'),\n    mergeMeta = require('./merge-meta'),\n    convertMd = require('./convert-md');\n\nmodule.exports = function(argv) {\n  if (!argv.meta) {\n    // load the metadata file if it exists\n    argv.meta = fs.existsSync(argv.input + '/meta.json') ? require(argv.input + '/meta.json') : {};\n  }\n\n  return pi.pipeline([\n      md.parseHeader(),\n      md.parseMd(),\n      md.annotateMdHeadings(),\n      md.highlight(function(code, lang) {\n        if (argv.highlight && typeof argv.highlight[lang] === 'function') {\n          return argv.highlight[lang](code, lang);\n        }\n        return false;\n      }),\n      convertMd({\n        'header-links': argv['header-links']\n      }),\n\n      // map paths\n      setOutputPath({\n        input: argv.input,\n        output: argv.output,\n        isSingleFile: argv.isSingleFile,\n        'asset-path': argv['asset-path']\n      }),\n\n      // merge metadata now that relative is set\n      mergeMeta(argv.meta),\n\n      // apply handlebars templates\n      applyTemplate({\n        // read the template\n        template: fs.readFileSync(argv.layout + '/page.html', 'utf8'),\n        partials: fs.existsSync(argv.layout + '/partials') ? argv.layout + '/partials' : [],\n        helpers: fs.existsSync(argv.layout + '/helpers') ? argv.layout + '/helpers' : []\n      })\n  ]);\n};\n","/home/travis/build/npmtest/node-npmtest-markdown-styles/node_modules/markdown-styles/lib/set-output-path.js":"var path = require('path'),\n    pi = require('pipe-iterators');\n\nmodule.exports = function(opts) {\n  return pi.map(function(item) {\n    var relative = item.path.replace(opts.input + '/', ''),\n        outputDir;\n\n    if (opts.isSingleFile) {\n      outputDir = path.normalize(item.path.replace(opts.input, opts.output + path.sep));\n    } else {\n      outputDir = path.normalize(path.dirname(item.path).replace(opts.input, opts.output + path.sep));\n    }\n    var extension = path.extname(item.path);\n    // path: full path to the output file\n    item.path = path.normalize(outputDir + path.sep + path.basename(item.path, extension) + '.html');\n    // relative: path from top of the tree\n    // used in merge-meta to implement cascading scope in meta.json\n    item.relative = relative;\n\n    // determine the relative path to ./output/assets\n    // -- since files can be in subdirs like: sub/sub/dir/index.html\n\n    item.assetsRelative = path.relative(outputDir, opts['asset-path'] || opts.output + '/assets');\n\n    item.relative = item.relative.replace(/\\\\/g, '/');\n    item.assetsRelative = item.assetsRelative.replace(/\\\\/g, '/');\n\n    return item;\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-markdown-styles/node_modules/markdown-styles/lib/apply-template.js":"var fs = require('fs'),\n    path = require('path'),\n    glob = require('wildglob'),\n    pi = require('pipe-iterators'),\n    Handlebars = require('handlebars'),\n    xtend = require('xtend');\n\nfunction loadPartials(dir) {\n  dir = path.normalize(dir);\n  glob.sync(dir + '/*').filter(function(filename) {\n    var stat = fs.statSync(filename);\n    return stat.isFile();\n  }).map(function(filename) {\n    var partialName = path.basename(filename, path.extname(filename));\n    Handlebars.registerPartial(partialName, fs.readFileSync(filename, 'utf8'));\n  });\n}\n\nfunction loadHelpers(dir) {\n  dir = path.normalize(dir);\n  glob.sync(dir + '/*').filter(function(filename) {\n    var stat = fs.statSync(filename);\n    return stat.isFile();\n  }).map(function(filename) {\n      var helperName = path.basename(filename, path.extname(filename));\n      Handlebars.registerHelper(helperName, require(filename));\n  });\n}\n\nmodule.exports = function(opts) {\n  if (opts.partials && !Array.isArray(opts.partials)) {\n    opts.partials = [opts.partials];\n  }\n  if (!opts.partials) {\n    opts.partials = [];\n  }\n\n  if (opts.helpers && !Array.isArray(opts.helpers)) {\n    opts.helpers = [opts.helpers];\n  }\n  if (!opts.helpers) {\n    opts.helpers = [];\n  }\n\n  loadPartials(__dirname + '/../builtin/partials');\n  loadHelpers(__dirname + '/../builtin/helpers');\n\n  // load partials and helpers\n  opts.partials.map(loadPartials);\n  opts.helpers.map(loadHelpers);\n\n  var template = Handlebars.compile(opts.template);\n\n  return pi.forEach(function(item, enc, done) {\n    item.contents = item.contents.replace(/<(ul|ol)>/g, '<$1 class=\"list\">')\n      .replace('{{&gt;', '{{>')\n      .replace(/<pre><code[^>]*>([\\s\\S]*?)<\\/code><\\/pre>/mg, '<pre class=\"prettyprint\">$1</pre>')\n      .replace(/<p><img([^>]*)>\\s*<\\/p>/g, '<p class=\"img-container\"><img$1></p>');\n\n    // making the partial a function prevents handlebars from trying to parse\n    // strings in the contents output, such as `{}` as HBS expressions\n    Handlebars.registerPartial('content', function() { return item.contents; });\n\n    item.contents = template(item)\n        // allow {{}} via escaping\n          .replace(/\\\\{/g, '{')\n          .replace(/\\\\}/g, '}');\n  });\n};\n\n","/home/travis/build/npmtest/node-npmtest-markdown-styles/node_modules/markdown-styles/lib/merge-meta.js":"var pi = require('pipe-iterators'),\n    xtend = require('xtend'),\n    path = require('path');\n\nmodule.exports = function(meta) {\n\n  return pi.map(function(item) {\n    var subpath, newItem = {};\n    // split by path.sep for Windows compatibility\n    var parts = item.relative.split(path.sep).filter(Boolean);\n    // we have exactly as many directories to consider\n    // as there are elements in parts\n    for (var i = 0; i < parts.length; i++) {\n      subpath = parts.slice(0, i).join('/');\n      // add a trailing '/' for all but the first one, which is just '*'\n      if (i > 0) {\n        subpath += '/';\n      }\n      // each of these corresponds to a directory\n      subpath += '*';\n      // console.log('index i=' + i + ' subpath=' + subpath);\n      if (typeof meta[subpath] === 'object') {\n        newItem = xtend(newItem, meta[subpath]);\n      }\n    }\n    // as far as the file itself, we remove trailing .md\n    subpath = item.relative.replace(/.md$/, '');\n    //console.log(\"last=\" + subpath);\n    newItem = xtend(newItem, meta[subpath]);\n\n    // finally inject the data from the file itself\n    newItem = xtend(newItem, item);\n    // set title from first heading if otherwise missing\n    if (!newItem.title && newItem.headings && newItem.headings[0]) {\n      newItem.title = newItem.headings[0].text;\n    }\n\n    return newItem;\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-markdown-styles/node_modules/markdown-styles/lib/convert-md.js":"var url = require('url'),\n    path = require('path'),\n    pi = require('pipe-iterators'),\n    md = require('markdown-stream-utils');\n\n// A wrapper around md.convertMd that includes the custom heading generation and id\n// generation code.\nmodule.exports = function(argv) {\n  if (!argv) {\n    // default to true to match bin/generate-md\n    argv = { 'header-links': true };\n  }\n\n  // custom rendered for headings\n  var renderer = new md.marked.Renderer();\n  // Note: the fourth argument is NOT part of the regular Marked interface - I'm adding\n  // it (in markdown-stream-utils) so that id generation can live in one place.\n  // I wish marked's API would give me direct access to the token in the renderer itself :'(\n  renderer.heading = function(text, level, raw, token) {\n    // the 4th parameter is an addition so check whether we got that parameter before accessing it\n    var id = this.options.headerPrefix + (token ? token.id : raw);\n    return '<h' +\n      level +\n      ' id=\"' +\n      id +\n      '\">' +\n      // if we want to generate header links, add the <a> link\n      (argv['header-links'] ?\n        '<a class=\"header-link\" href=\"#' + id + '\"></a>' : '') +\n      text +\n      '</h' +\n      level +\n      '>\\n';\n  };\n\n  renderer.link = function(href, title, text) {\n    if (this.options.sanitize) {\n      try {\n       var prot = decodeURIComponent(unescape(href))\n          .replace(/[^\\w:]/g, '')\n          .toLowerCase();\n      } catch (e) {\n        return '';\n      }\n      if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0) {\n        return '';\n      }\n    }\n    var parsed = url.parse(href);\n    // convert [.md] in local links (e.g. links with no protocol)\n    if (!parsed.protocol) {\n      var ext = path.extname(parsed.pathname || '');\n      if (ext === '.markdown' ||\n          ext === '.mdown' ||\n          ext === '.mkd' ||\n          ext === '.mkdn' ||\n          ext === '.md') {\n        var dirname = path.dirname(parsed.pathname);\n        parsed.pathname = dirname +\n              (dirname.charAt(dirname.length - 1) === '/' ? '' : '/') +\n              path.basename(parsed.pathname, ext) + '.html';\n        href = url.format(parsed);\n      }\n    }\n\n    var out = '<a href=\"' + href + '\"';\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n    out += '>' + text + '</a>';\n    return out;\n  };\n\n  return md.convertMd({\n    renderer: renderer\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-markdown-styles/node_modules/markdown-styles/lib/stream/index.js":"module.exports = {\n  copy: require('./copy.js'),\n  read: require('./read.js'),\n  write: require('./write.js')\n};\n","/home/travis/build/npmtest/node-npmtest-markdown-styles/node_modules/markdown-styles/lib/stream/copy.js":"var fs = require('fs'),\n    path = require('path'),\n    mkdirp = require('mkdirp'),\n    pi = require('pipe-iterators');\n\nmodule.exports = function(targetFn) {\n  var seen = {};\n  return pi.thru.obj(function(filename, enc, done) {\n    var target = targetFn(filename);\n    // skip by returning false\n    if (!target) { return done(); }\n\n    var copyDir = path.dirname(target);\n    (seen[copyDir] ? function(a, onDone) { onDone(null); } : mkdirp)(\n      copyDir, function(err) {\n        if (err) {\n          throw err;\n        }\n        seen[copyDir] = true;\n        fs.createReadStream(filename)\n          .pipe(fs.createWriteStream(target))\n          .once('finish', function() {\n            done();\n          })\n          .once('error', done);\n      });\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-markdown-styles/node_modules/markdown-styles/lib/stream/read.js":"var fs = require('fs'),\n    pi = require('pipe-iterators');\n\nfunction read() {\n  return pi.thru.obj(function(file, enc, onDone) {\n    var stat = fs.statSync(file);\n    if (stat.isFile()) {\n      this.push({\n        path: file,\n        stat: stat,\n        contents: fs.readFileSync(file).toString()\n      });\n    }\n    onDone();\n  });\n}\n\nmodule.exports = read;\n","/home/travis/build/npmtest/node-npmtest-markdown-styles/node_modules/markdown-styles/lib/stream/write.js":"var path = require('path'),\n    fs = require('fs'),\n    pi = require('pipe-iterators'),\n    mkdirp = require('mkdirp');\n\nfunction dest() {\n  var seen = {};\n\n  return pi.thru.obj(function(file, enc, onDone) {\n    var writeDir = path.dirname(file.path);\n\n    (seen[writeDir] ? function(a, onDone) { onDone(null); } : mkdirp)(\n      writeDir, function(err) {\n        if (err) {\n          return onDone(err);\n        }\n        seen[writeDir] = true;\n        fs.writeFileSync(file.path, file.contents);\n        onDone();\n      }\n    );\n  });\n}\n\nmodule.exports = dest;\n","/home/travis/build/npmtest/node-npmtest-markdown-styles/node_modules/markdown-styles/lib/find-module.js":"var nodeResolve = require('resolve');\n\nmodule.exports = function(name, paths) {\n  var result = '', err;\n  for (var i = 0; i < paths.length; i++) {\n    var path = paths[i];\n    try {\n      result = nodeResolve.sync(name, { basedir: path });\n    } catch (e) {\n      err = e;\n    }\n    return result;\n  }\n  console.error('Cannot find module ' + name + ' from ' + paths);\n  throw err;\n};\n"}